{
  "name": "Scoping Sheet Process",
  "nodes": [
    {
      "parameters": {
        "resource": "pdf",
        "pdfTemplateId": "29077b2398cd8cb6",
        "jsonParameters": true,
        "propertiesJson": "={{ $('Converting Obj to String').item.json.request }}"
      },
      "type": "n8n-nodes-base.apiTemplateIo",
      "typeVersion": 1,
      "position": [
        80,
        340
      ],
      "id": "848fe260-62f3-48d9-803a-df286fab4216",
      "name": "APITemplate.io1",
      "credentials": {
        "apiTemplateIoApi": {
          "id": "rF2CXSqjAXrdooEx",
          "name": "APITemplate.io account"
        }
      }
    },
    {
      "parameters": {
        "path": "5a0cd093-a0ed-404a-bfa1-be712355a441",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1620,
        380
      ],
      "id": "a0b4cdb0-3b42-4119-a985-8b54d943c39d",
      "name": "Webhook1",
      "webhookId": "5a0cd093-a0ed-404a-bfa1-be712355a441"
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1740,
        460
      ],
      "id": "96b2fb5d-6567-4c09-8769-607e982b03c2",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2d0f7d07-a014-4c0e-83cb-7d6e02e6d946",
              "leftValue": "={{ $json.data.approved }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1040,
        360
      ],
      "id": "f14c0818-e750-49f5-b3ce-b66b9149f9f4",
      "name": "If"
    },
    {
      "parameters": {
        "fromEmail": "stormyferntreeofficial@gmail.com",
        "toEmail": "bluebrooke@naver.com",
        "subject": "Scoping Status",
        "emailFormat": "text",
        "text": "=Scoping sheet approval rejected. Please reach out to the client to gather the scope. \nClient Email:  {{ $('combining').item.json.email }}",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1520,
        460
      ],
      "id": "fa13a09b-7e8a-4ecd-a1bb-85bbb10da0ce",
      "name": "Send Email1",
      "webhookId": "8b8f6558-1b2a-476a-9ab8-a810e265bbca",
      "credentials": {
        "smtp": {
          "id": "E6qJoQyuVDVdeRx1",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Formatting to Markdown \nTakes in JSON request from SLM to generate the Scoping sheet, sending it to Sales for approval.",
        "height": 200,
        "width": 320
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1140,
        120
      ],
      "id": "73b28d2f-d4b1-4b12-9f75-a8ec42d0869e",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Scoping Sheet approved\nWill trigger the next workflow to generate SOW",
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "7fb79a33-0c4b-4d37-ae77-f1c51e134739",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Scoping Sheet rejected\nSends email to staff, prompting them to reach out to client for scope",
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        540,
        660
      ],
      "id": "ecbd3eb8-7254-4c9a-863a-61b14eb8c2e1",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "659eee23-dd3b-46f9-b774-cf035c0e9253",
              "name": "request",
              "value": "{     \"id\": 1,     \"email\": \"diansofia03@gmail.com\",     \"scopingsheet_markdown\": \" Scoping Sheet for FinSecureApp\\n\\n   | Category | Requirement | Status |\\n   | --- | :-------------------------------- |:----------------------------------------------------------------------------------------------------------------------|\\n   | Application Overview | Application Name | FinSecureApp |\\n   | Application Overview | Production URL | https://finsecure.com |\\n   | Application Overview | Environment for Testing | ['Staging'] |\\n   | Application Overview | Application Type | ['Web', 'API'] |\\n   | Authentication & Access Control | Authentication Method | ['Username & Password', 'SSO'] |\\n   | Authentication & Access Control | User Roles | ['Anonymous Users', 'Regular Users', 'Power Users', 'Administrators', 'System Administrators'] |\\n   | Authentication & Access Control | Custom Roles | 2 |\\n   | Authentication & Access Control | Session Management | ['JWT'] |\\n   | Authentication & Access Control | Session Timeout Period | 20 |\\n   | Input Processing | total_num_input_fields | 15 |\\n   | Input Processing | Input Types Present | ['Free text fields', 'File uploads (Types allowed: .pdf, .png)', 'Payment information', 'Personal data', 'API calls'] |\\n   | Data Processing | Sensitive Data Handled | ['Personal Information', 'Financial Data'] |\\n   | Data Processing | Data Storage | ['Local Database', 'Cloud Storage'] |\\n   | API Details | Number of Endpoints | 20 |\\n   | API Details | Authentication Required | Yes |\\n   | API Details | Rate Limiting | Yes |\\n   | API Details | Documentation Available | Yes |\\n   | API Details | API Methods | ['GET', 'POST', 'PUT'] |\\n   | Infrastructure | Security Controls Present | ['WAF', 'IPS/IDS', 'Load Balancer', 'Anti-DDoS'] |\\n   | Infrastructure | Hosting | ['Cloud'] |\\n   | Business Logic | Critical Functions | ['Financial Transactions', 'User Data Management'] |\\n   | Security Requirements | Compliance Requirements | ['PCI DSS', 'GDPR'] |\\n   | Security Requirements | Previous Testing | 10/12/2023 |\\n   | Security Requirements | Known Vulnerabilities | none reported |\\n   | Security Requirements | Critical Assets | payment gateway, user accounts |\\n   | Testing Constraints | Time Restrictions | ['24/7 Allowed'] |\\n   | Testing Constraints | Testing Limitations | ['No Destructive Testing'] |\\n   | Deliverables | Required Reports | ['Executive Summary', 'Technical Details', 'Remediation Plan', 'Risk Rating'] |\\n   | Notes | Additional Information | Application uses two-factor authentication for all roles. API rate limits enforced at 500 requests per minute |\\n   | Client Contact Information | Client Email | aliceBrown@outlook.com |\",     \"requirement_df\": [         {             \"category\": \"Application Overview\",             \"requirement\": \"Application Name\",             \"status\": \"FinSecureApp\"         },         {             \"category\": \"Application Overview\",             \"requirement\": \"Production URL\",             \"status\": \"https://finsecure.com\"         },         {             \"category\": \"Application Overview\",             \"requirement\": \"Environment for Testing\",             \"status\": [                 \"Staging\"             ]         },         {             \"category\": \"Application Overview\",             \"requirement\": \"Application Type\",             \"status\": [                 \"Web\",                 \"API\"             ]         },         {             \"category\": \"Authentication & Access Control\",             \"requirement\": \"Authentication Method\",             \"status\": [                 \"Username & Password\",                 \"SSO\"             ]         },         {             \"category\": \"Authentication & Access Control\",             \"requirement\": \"User Roles\",             \"status\": [                 \"Anonymous Users\",                 \"Regular Users\",                 \"Power Users\",                 \"Administrators\",                 \"System Administrators\"             ]         },         {             \"category\": \"Authentication & Access Control\",             \"requirement\": \"Custom Roles\",             \"status\": \"2\"         },         {             \"category\": \"Authentication & Access Control\",             \"requirement\": \"Session Management\",             \"status\": [                 \"JWT\"             ]         },         {             \"category\": \"Authentication & Access Control\",             \"requirement\": \"Session Timeout Period\",             \"status\": \"20\"         },         {             \"category\": \"Input Processing\",             \"requirement\": \"total_num_input_fields\",             \"status\": \"15\"         },         {             \"category\": \"Input Processing\",             \"requirement\": \"Input Types Present\",             \"status\": [                 \"Free text fields\",                 \"File uploads (Types allowed: .pdf, .png)\",                 \"Payment information\",                 \"Personal data\",                 \"API calls\"             ]         },         {             \"category\": \"Data Processing\",             \"requirement\": \"Sensitive Data Handled\",             \"status\": [                 \"Personal Information\",                 \"Financial Data\"             ]         },         {             \"category\": \"Data Processing\",             \"requirement\": \"Data Storage\",             \"status\": [                 \"Local Database\",                 \"Cloud Storage\"             ]         },         {             \"category\": \"API Details\",             \"requirement\": \"Number of Endpoints\",             \"status\": \"20\"         },         {             \"category\": \"API Details\",             \"requirement\": \"Authentication Required\",             \"status\": \"Yes\"         },         {             \"category\": \"API Details\",             \"requirement\": \"Rate Limiting\",             \"status\": \"Yes\"         },         {             \"category\": \"API Details\",             \"requirement\": \"Documentation Available\",             \"status\": \"Yes\"         },         {             \"category\": \"API Details\",             \"requirement\": \"API Methods\",             \"status\": [                 \"GET\",                 \"POST\",                 \"PUT\"             ]         },         {             \"category\": \"Infrastructure\",             \"requirement\": \"Security Controls Present\",             \"status\": [                 \"WAF\",                 \"IPS/IDS\",                 \"Load Balancer\",                 \"Anti-DDoS\"             ]         },         {             \"category\": \"Infrastructure\",             \"requirement\": \"Hosting\",             \"status\": [                 \"Cloud\"             ]         },         {             \"category\": \"Business Logic\",             \"requirement\": \"Critical Functions\",             \"status\": [                 \"Financial Transactions\",                 \"User Data Management\"             ]         },         {             \"category\": \"Security Requirements\",             \"requirement\": \"Compliance Requirements\",             \"status\": [                 \"PCI DSS\",                 \"GDPR\"             ]         },         {             \"category\": \"Security Requirements\",             \"requirement\": \"Previous Testing\",             \"status\": \"10/12/2023\"         },         {             \"category\": \"Security Requirements\",             \"requirement\": \"Known Vulnerabilities\",             \"status\": \"none reported\"         },         {             \"category\": \"Security Requirements\",             \"requirement\": \"Critical Assets\",             \"status\": \"payment gateway, user accounts\"         },         {             \"category\": \"Testing Constraints\",             \"requirement\": \"Time Restrictions\",             \"status\": [                 \"24/7 Allowed\"             ]         },         {             \"category\": \"Testing Constraints\",             \"requirement\": \"Testing Limitations\",             \"status\": [                 \"No Destructive Testing\"             ]         },         {             \"category\": \"Deliverables\",             \"requirement\": \"Required Reports\",             \"status\": [                 \"Executive Summary\",                 \"Technical Details\",                 \"Remediation Plan\",                 \"Risk Rating\"             ]         },         {             \"category\": \"Notes\",             \"requirement\": \"Additional Information\",             \"status\": \"Application uses two-factor authentication for all roles. API rate limits enforced at 500 requests per minute\"         },         {             \"category\": \"Client Contact Information\",             \"requirement\": \"Client Email\",             \"status\": \"aliceBrown@outlook.com\"         }     ],     \"timestamp\": \"2025-03-31_20-20-03\" }",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1420,
        380
      ],
      "id": "3c06279f-3513-4764-a72e-b488a5920e8b",
      "name": "Setting of JSON Obj"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Extract data from requirement_df\nconst data = $json.request.requirement_df;\n\n// Table headers\nlet markdownTable = \"## Scoping Sheet\\n\\n\";\nmarkdownTable += \"| Category | Requirement | Status |\\n\";\nmarkdownTable += \"|----------|-------------|--------|\\n\";\n\n// Loop through each row and extract details\ndata.forEach(row => {\n    const category = row.category || \"NA\";\n    const requirement = row.requirement || \"NA\";\n\n    // Handle status formatting:\n    let status = \"NA\";\n    if (Array.isArray(row.status)) {\n        status = row.status.join(', ');\n    } else if (typeof row.status === 'string' || typeof row.status === 'number') {\n        status = row.status.toString().trim();\n    }\n\n    // Append row to Markdown table\n    markdownTable += `| ${category} | ${requirement} | ${status} |\\n`;\n});\n\n// Return formatted Markdown\nreturn { json: { scopingsheet_markdown: markdownTable } };\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1200,
        380
      ],
      "id": "0a0a6cfe-892b-4616-a7b8-db271bc55223",
      "name": "Formatting Markdown in JSON"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "87af8451-5340-45a3-83b4-d8dd672efcde",
              "name": "request.scopingsheet_markdown",
              "value": "={{ $json.scopingsheet_markdown }}",
              "type": "string"
            },
            {
              "id": "06178b62-2bbf-4a63-8755-ba544cd134a7",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -900,
        380
      ],
      "id": "5a036070-b3e4-45d8-875b-748c5e414ecf",
      "name": "Converting Obj to String"
    },
    {
      "parameters": {
        "table": {
          "__rl": true,
          "value": "scope_db",
          "mode": "name"
        },
        "dataMode": "defineBelow",
        "valuesToSend": {
          "values": [
            {
              "column": "client_id",
              "value": "={{ $('combining').item.json.id }}"
            },
            {
              "column": "email",
              "value": "={{ $('combining').item.json.email }}"
            },
            {
              "column": "scopingsheet_markdown",
              "value": "={{ $('combining').item.json.scopingsheet_markdown }}"
            },
            {
              "column": "project_id",
              "value": "={{ $json.project_id }}"
            },
            {
              "column": "scopingsheet_URL",
              "value": "={{ $('APITemplate.io1').item.json.download_url }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        2140,
        220
      ],
      "id": "a31a6529-fbaa-4172-968b-921f5b2f5244",
      "name": "Insert data into scope_db",
      "credentials": {
        "mySql": {
          "id": "pwehlYKuQhhIXisF",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        3000,
        240
      ],
      "id": "3c88af0c-50e7-4bf8-9ddb-a1633814ee17",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "db9b3e6e-437b-446a-aa03-80f0d8b5d373",
              "name": "scopingsheet_markdown",
              "value": "={{ $json.request.scopingsheet_markdown }}",
              "type": "string"
            },
            {
              "id": "8e49c9a7-c9ed-4d00-aa67-071cf06faf47",
              "name": "id",
              "value": "={{ $('Setting of JSON Obj').item.json.request.id }}",
              "type": "string"
            },
            {
              "id": "65b05988-5ac7-49fd-962f-718c057f8684",
              "name": "email",
              "value": "={{ $('Setting of JSON Obj').item.json.request.email }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -680,
        380
      ],
      "id": "0b22377a-2059-42c4-9104-3e45fee75830",
      "name": "combining"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        900,
        600
      ],
      "id": "146eb457-03db-4d8c-8d67-796aa314058e",
      "name": "Respond to Webhook4"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "iYWKaQzBWhK30rPq",
          "mode": "list",
          "cachedResultName": "SOW Generation"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        2740,
        220
      ],
      "id": "d6d885ab-aa31-4d1c-b251-de15d5df8cda",
      "name": "Execute SOW Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ab4320ab-ff4e-4d44-a8ef-b983b739d336",
              "name": "client_id",
              "value": "={{ $('combining').item.json.id }}",
              "type": "string"
            },
            {
              "id": "10df3fd4-3e95-415a-9c3d-cceb5fea7bc2",
              "name": "client_email",
              "value": "={{ $('combining').item.json.email }}",
              "type": "string"
            },
            {
              "id": "d1c423b0-1f20-4eed-a559-4f732dffdec0",
              "name": "project_id",
              "value": "={{ $('obtaining project id').item.json.project_id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2460,
        220
      ],
      "id": "a739dd89-e818-4519-b6b4-3e0727d17c2e",
      "name": "Passing Key"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "fromEmail": "stormyferntreeofficial@gmail.com",
        "toEmail": "={{ $('combining').item.json.email }} ",
        "subject": "Generated Scoping Sheet Approval",
        "message": "=Please view the generated scoping sheet through the link before approving or rejecting the document. The content is based on the responses provided in the chat.\nLink:  {{ $json.download_url }}",
        "approvalOptions": {
          "values": {
            "approvalType": "double",
            "disapproveLabel": "Reject"
          }
        },
        "options": {
          "limitWaitTime": {
            "values": {
              "resumeAmount": 2,
              "resumeUnit": "days"
            }
          }
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        660,
        280
      ],
      "id": "e79ed88f-c9bf-4182-aee0-ae5865bbb41a",
      "name": "Send Email to Client",
      "webhookId": "4e0f99db-90bd-418c-a4f9-2893d04ab103",
      "alwaysOutputData": false,
      "credentials": {
        "smtp": {
          "id": "E6qJoQyuVDVdeRx1",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "stormyferntreeofficial@gmail.com",
        "toEmail": "=stormyferntreeofficial@gmail.com",
        "subject": "Generated Scoping Sheet",
        "html": "=markdown file attached",
        "options": {
          "attachments": "data"
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        100,
        620
      ],
      "id": "50f6ca90-e769-4a07-bbd4-2abc97885d9a",
      "name": "Send Email to Staff",
      "webhookId": "9e5d33d3-b455-44f8-94cf-6c1807341513",
      "credentials": {
        "smtp": {
          "id": "E6qJoQyuVDVdeRx1",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "scopingsheet_markdown",
        "options": {
          "fileName": "markdown_sheet1.md"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -320,
        380
      ],
      "id": "975705ce-daf8-42cd-a004-ab5ab98fcc93",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "table": {
          "__rl": true,
          "value": "project_details",
          "mode": "list",
          "cachedResultName": "project_details"
        },
        "dataMode": "defineBelow",
        "valuesToSend": {
          "values": [
            {
              "column": "application_name",
              "value": "={{ $('Setting of JSON Obj').item.json.request.requirement_df[0].status }}"
            },
            {
              "column": "production_url",
              "value": "={{ $('Setting of JSON Obj').item.json.request.requirement_df[1].status }}"
            },
            {
              "column": "testing_environment",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[2].status) }}"
            },
            {
              "column": "application_type",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[3].status) }}"
            },
            {
              "column": "authentication_method",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[4].status) }}"
            },
            {
              "column": "user_roles",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[5].status) }}"
            },
            {
              "column": "session_management",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[7].status) }}"
            },
            {
              "column": "session_timeout_period",
              "value": "={{ $('Setting of JSON Obj').item.json.request.requirement_df[8].status }}"
            },
            {
              "column": "total_num_input_fields",
              "value": "={{ $('Setting of JSON Obj').item.json.request.requirement_df[9].status }}"
            },
            {
              "column": "input_types_present",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[10].status) }}"
            },
            {
              "column": "sensitive_data_handled",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[11].status) }}"
            },
            {
              "column": "data_storage",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[12].status) }}"
            },
            {
              "column": "number_of_endpoints",
              "value": "={{ $('Setting of JSON Obj').item.json.request.requirement_df[13].status }}"
            },
            {
              "column": "authentication_required",
              "value": "={{ $('Setting of JSON Obj').item.json.request.requirement_df[14].status }}"
            },
            {
              "column": "rate_limiting",
              "value": "={{ $('Setting of JSON Obj').item.json.request.requirement_df[15].status }}"
            },
            {
              "column": "documentation_available",
              "value": "={{ $('Setting of JSON Obj').item.json.request.requirement_df[16].status }}"
            },
            {
              "column": "security_controls_present",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[18].status) }}"
            },
            {
              "column": "hosting",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[19].status) }}"
            },
            {
              "column": "critical_functions",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[20].status) }}"
            },
            {
              "column": "compliance_requirements",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[21].status) }}"
            },
            {
              "column": "previous_testing",
              "value": "={{ new Date($('Setting of JSON Obj').item.json.request.requirement_df[22].status).toISOString().split('T')[0] }}"
            },
            {
              "column": "time_restrictions",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[25].status) }}"
            },
            {
              "column": "testing_limitations",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[26].status) }}"
            },
            {
              "column": "required_reports",
              "value": "={{ JSON.stringify($('Setting of JSON Obj').item.json.request.requirement_df[27].status) }}"
            },
            {
              "column": "client_id",
              "value": "={{ $('Setting of JSON Obj').item.json.request.id }}"
            },
            {
              "column": "project_start_date",
              "value": "={{ $json.project_start_date ? $json.project_start_date : null }}"
            },
            {
              "column": "draft_report_due_date",
              "value": "={{ $json.draft_report_due_date ? $json.draft_report_due_date : null }}"
            },
            {
              "column": "final_report_due_date",
              "value": "={{ $json.final_report_due_date ? $json.final_report_due_date : null }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        1420,
        280
      ],
      "id": "2c29bd50-e700-412b-a828-c5499c7a5967",
      "name": "Insert into Project Details",
      "credentials": {
        "mySql": {
          "id": "pwehlYKuQhhIXisF",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT project_id FROM data.project_details\nWHERE client_id = {{ $('Setting of JSON Obj').item.json.request.id }}\nORDER BY created_at DESC\nLIMIT 1;",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        1780,
        220
      ],
      "id": "e37ce4d9-3cfb-40dc-a1ca-af347afc0f67",
      "name": "obtaining project id",
      "credentials": {
        "mySql": {
          "id": "pwehlYKuQhhIXisF",
          "name": "MySQL account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "APITemplate.io1": {
      "main": [
        [
          {
            "node": "Send Email to Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Setting of JSON Obj",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Insert into Project Details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Email1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email1": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setting of JSON Obj": {
      "main": [
        [
          {
            "node": "Formatting Markdown in JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatting Markdown in JSON": {
      "main": [
        [
          {
            "node": "Converting Obj to String",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Converting Obj to String": {
      "main": [
        [
          {
            "node": "combining",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert data into scope_db": {
      "main": [
        [
          {
            "node": "Passing Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "combining": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute SOW Workflow": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Passing Key": {
      "main": [
        [
          {
            "node": "Execute SOW Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email to Client": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email to Staff": {
      "main": [
        [
          {
            "node": "Respond to Webhook4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "APITemplate.io1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Email to Staff",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert into Project Details": {
      "main": [
        [
          {
            "node": "obtaining project id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtaining project id": {
      "main": [
        [
          {
            "node": "Insert data into scope_db",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "983db53c-7e50-42c1-87cf-7b10d298e1e2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8712c2bb4e02902a13a43c75c2acacd2aabdb06be443b7b14c332bd919069ab1"
  },
  "id": "qMT0KZFYsYYr5ypg",
  "tags": []
}